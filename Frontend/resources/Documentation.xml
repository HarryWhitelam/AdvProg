<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Frontend</name>
    </assembly>
    <members>
        <member name="T:AdvProg.MainWindow">
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:AdvProg.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AdvProg.PopUp">
            <summary>
            PopUp
            </summary>
        </member>
        <member name="M:AdvProg.PopUp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:AdvProg.ViewModel">
            <summary>
            Class <c>ViewModel</c> is used to control various elements of the GUI
            </summary>
        </member>
        <member name="M:AdvProg.ViewModel.CountRichLines(System.String)">
            <summary>
            Method <c>CountRichLines</c> is used to count the number of lines the print will require
            </summary>
            <param name="resultString"></param> the string to be measured
            <returns>Number of lines</returns>
        </member>
        <member name="M:AdvProg.ViewModel.GetPriorChar(System.Windows.Controls.TextBox,System.Int32)">
            <summary>
            Method <c>GetPriorChar</c> returns the character in the textbox one index before the cursor. 
            </summary>
            <param name="textbox"></param> the textbox to be addressed
            <param name="curIndex"></param> the current index of the cursor/selection
            <returns></returns>
        </member>
        <member name="M:AdvProg.ViewModel.RemoveCurrentLineText(System.Windows.Controls.TextBox)">
            <summary>
            Method <c>RemoveCurrentLineText</c> removes the current entered line text in a given TextBox
            </summary>
            <param name="textbox"></param> the textbox that will be affected
        </member>
        <member name="M:AdvProg.ViewModel.PrintResult(System.String,System.String)">
            <summary>
            Method <c>PrintResults</c> takes the input string and moves it to the PrintWindow along with the result
            </summary>
            <param name="result"></param> the result string to be printed
            <param name="prompt"></param> the prompt which the user entered
        </member>
        <member name="M:AdvProg.ViewModel.PrintError(System.String,System.String)">
            <summary>
            Method <c>PrintError</c> is used when an error is printed, this is done in red with some formatting
            </summary>
            <param name="error"></param> the error message to be printed
            <param name="prompt"></param> the prompt which the user entered
        </member>
        <member name="M:AdvProg.ViewModel.UpdateWorkstation">
            <summary>
            Method <c>UpdateWorkstation</c> is used to synchronise the GUI workstation with the backend VariableStore
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.ReturnCommand">
            <summary>
            Method <c>ReturnCommand</c> is used with the return keybind to send prompts to the backend
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.BackCommand">
            <summary>
            Method <c>BackCommand</c> is used with the backspace keybind to handle character deletion. This ensures the user cannot delete previous prompts/move lines
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.LeftCommand">
            <summary>
            Method <c>LeftCommand</c> is used with the left-arrow keybind to handle line-selection. This ensures the user cannot ascend/descend lines incorrectly. 
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.DelVarCommand">
            <summary>
            Method <c>DelVarCommand</c> is used to delete a variable from the Workstation and hence the VariableStore
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.UpHistoryCommand">
            <summary>
            Method <c>UpHistoryCommand</c> is used with the up-arrow keybind to handle history viewing (ascends through the history array). 
            </summary>
        </member>
        <member name="P:AdvProg.ViewModel.DownHistoryCommand">
            <summary>
            Method <c>DownHistoryCommand</c> is used to descend through the history array using the down-arrow keybind. 
            </summary>
        </member>
        <member name="T:AdvProg.App">
            <summary>
            App
            </summary>
        </member>
        <member name="M:AdvProg.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:AdvProg.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:Frontend.GraphWindow">
            <summary>
            Interaction logic for GraphWindow.xaml
            </summary>
            <summary>
            GraphWindow
            </summary>
        </member>
        <member name="M:Frontend.GraphWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Frontend.OxyplotGraphWindow">
            <summary>
            Interaction logic for OxyplotGraphWindow.xaml
            </summary>
            <summary>
            OxyplotGraphWindow
            </summary>
        </member>
        <member name="M:Frontend.OxyplotGraphWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Frontend.Settings">
            <summary>
            Interaction logic for Settings.xaml
            </summary>
            <summary>
            Settings
            </summary>
        </member>
        <member name="M:Frontend.Settings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
